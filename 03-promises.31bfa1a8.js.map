{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEaC,SAASC,cAAc,SAE/BC,iBAAiB,UAAU,SAAAC,GAC9BA,EAAMC,iBAKN,IAJA,IAAIC,EAAQL,SAASC,cAAc,uBAAuBK,cACpDC,EAAOP,SAASC,cAAc,sBAAsBK,cACpDE,EAASR,SAASC,cAAc,wBAAwBK,cAErDG,EAAI,EAAGA,GAAKD,EAAQC,IAC3BC,EAAcD,EAAGJ,GACdM,MAAK,SAAAC,G,IAAGC,EAAQD,EAARC,SAAUC,EAAKF,EAALE,MACjBC,EAAAjB,GAASkB,OAAOC,QACd,uBAAwCC,OAAfL,EAAS,QAAYK,OAANJ,EAAM,M,IAGjDK,OAAM,SAAAP,G,IAAGC,EAAQD,EAARC,SAAUC,EAAKF,EAALE,MAClBC,EAAAjB,GAASkB,OAAOI,QACd,sBAAqCF,OAAfL,EAAS,QAAYK,OAANJ,EAAM,M,IAGjDT,GAASE,EAGX,SAASG,EAAcG,EAAUC,GAC/B,IAAMO,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEZ,WAAUC,UAEpBY,EAAO,CAAEb,WAAUC,S,GAEpBA,E,IAIPX,EAAMyB,cAAcC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', event => {\n  event.preventDefault();\n  let delay = document.querySelector('input[name=\"delay\"]').valueAsNumber;\n  const step = document.querySelector('input[name=\"step\"]').valueAsNumber;\n  const amount = document.querySelector('input[name=\"amount\"]').valueAsNumber;\n\n  for (let i = 1; i <= amount; i++) {\n    createPromise(i, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    delay += step;\n  }\n\n  function createPromise(position, delay) {\n    const shouldResolve = Math.random() > 0.3;\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (shouldResolve) {\n          resolve({ position, delay });\n        } else {\n          reject({ position, delay });\n        }\n      }, delay);\n    });\n  }\n\n  event.currentTarget.reset();\n});\n"],"names":["$6JpON","parcelRequire","document","querySelector","addEventListener","event","preventDefault","delay1","valueAsNumber","step","amount","i","createPromise","then","param","position","delay","$parcel$interopDefault","Notify","success","concat","catch","failure","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","currentTarget","reset"],"version":3,"file":"03-promises.31bfa1a8.js.map"}